@page "/game"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject FactRush.Services.ScoreService ScoreService
@using FactRush.Components
@using FactRush.Services

<div class="container mt-5 text-center">
    @if (!gameStarted && !gameOver)
    {
        <h1 class="mb-4">QuizRush</h1>
        <p class="lead">Test your general knowledge and speed !</p>
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="mb-3">
                    <label for="playerName" class="form-label">Pseudo : </label>
                    <input type="text" id="playerName" class="form-control" @bind="playerName" placeholder="Pseudo" />
                </div>
            </div>
        </div>
        <button class="btn btn-success btn-lg" @onclick="StartGame">Start the game</button>
    }
    else if (gameOver)
    {
        <h2 class="text-danger">Game Over!</h2>
        <p class="lead">Votre score : @score</p>
        <button class="btn btn-primary" @onclick="RestartGame">Try again</button>
        <button class="btn btn-primary" @onclick='()=> Navigation.NavigateTo("/")'>Home</button>
    }
    else
    {
        <div class="mb-3">
            <h2>@currentQuestion.Text</h2>
        </div>
        @if (answerChoices != null && answerChoices.Count >= 2)
        {
            <div class="row justify-content-center mb-3 g-2">
                <div class="col-md-5">
                    <button class="btn btn-outline-primary w-100" disabled="@(!answersEnabled)" @onclick='() => SubmitAnswer(answerChoices[0])'>
                        @answerChoices[0]
                    </button>
                </div>
                <div class="col-md-5">
                    <button class="btn btn-outline-primary w-100" disabled="@(!answersEnabled)" @onclick='() => SubmitAnswer(answerChoices[1])'>
                        @answerChoices[1]
                    </button>
                </div>
                @if(answerChoices.Count == 4)
                {
                    <div class="col-md-5">
                        <button class="btn btn-outline-primary w-100" disabled="@(!answersEnabled)" @onclick='() => SubmitAnswer(answerChoices[2])'>
                            @answerChoices[2]
                        </button>
                    </div>
                    <div class="col-md-5">
                        <button class="btn btn-outline-primary w-100" disabled="@(!answersEnabled)" @onclick='() => SubmitAnswer(answerChoices[3])'>
                            @answerChoices[3]
                        </button>
                    </div>
                }
            </div>
        }
        <p style="color: @(currentQuestion.Difficulty == "easy" ? "green" : currentQuestion.Difficulty == "medium" ? "orange" : "red")">
            Temps restant : @timeRemaining s
        </p>
        <h2>Score : @score</h2>
    }
</div>

@code {
    // Variables de jeu
    private string playerName = string.Empty;
    private string token = "";
    public Question currentQuestion = new Question { Text = "Loading", CorrectAnswer = "" };
    private readonly static int timer = 50;
    private int timeRemaining = timer;
    public int score = 0;
    private bool gameStarted = false;
    public bool gameOver = false;
    private bool answersEnabled = false;
    private System.Threading.Timer? countdownTimer;
    private List<string> answerChoices = new();

    /// <summary>
    /// Called when the component is initialized.
    /// Requests a unique token from the OpenTDB API.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        // Obtenir un token unique au début de la partie
        // Demander un token à l'API d'OpenTDB
        var response = await Http.GetFromJsonAsync<TokenResponse>("https://opentdb.com/api_token.php?command=request");
        if (response != null && response.ResponseCode == 0)
        {
            token = response.Token;
        }
    }

    /// <summary>
    /// Starts the game by resetting the score and loading the first question.
    /// </summary>
    private async Task StartGame()
    {
        gameStarted = true;
        gameOver = false;
        score = 0;
        currentQuestion = new Question { Text = "Loading", CorrectAnswer = "" };
        await LoadNextQuestion();
    }

    /// <summary>
    /// Loads the next question from the API and starts a countdown timer.
    /// </summary>
    private async Task LoadNextQuestion()
    {
        timeRemaining = timer;
        answersEnabled = false;
        countdownTimer?.Dispose();
        countdownTimer = new System.Threading.Timer(async _ =>
        {
            if (--timeRemaining <= 0)
            {
                await InvokeAsync(EndGame);
                countdownTimer?.Dispose();
            }
            else
            {
                await InvokeAsync(StateHasChanged);
            }
        }, null, 1000, 1000);

        _ = Task.Delay(5000).ContinueWith(_ =>
        {
            answersEnabled = true;
            InvokeAsync(StateHasChanged);
        });

        string url = $"https://opentdb.com/api.php?amount=1&token={token}";
        var result = await Http.GetFromJsonAsync<QuestionResponse>(url);
        if (result != null && result.ResponseCode == 0 && result.Questions.Length > 0)
        {
            currentQuestion = result.Questions[0];
            currentQuestion.DecodeHtmlEntities();
            GenerateAnswerChoices();
            Console.WriteLine($"New question loaded: {currentQuestion}");
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("No question loaded, ending game.");
            await EndGame();
        }
    }

    /// <summary>
    /// Submits the player's answer and either loads the next question or ends the game.
    /// </summary>
    /// <param name="answer">The answer provided by the player.</param>
    private async Task SubmitAnswer(string answer)
    {
        countdownTimer?.Dispose();

        if (answer == currentQuestion.CorrectAnswer)
        {
            score += currentQuestion.Difficulty switch
            {
                "easy" => 100,
                "medium" => 200,
                "hard" => 500,
                _ => 0
            };
            await LoadNextQuestion();
        }
        else
        {
            await EndGame();
        }
    }

    /// <summary>
    /// Ends the game, adds the player's score to the top scores list if applicable, and updates the UI.
    /// </summary>
    private async Task EndGame()
    {
        gameOver = true;
        gameStarted = false;
        if (!string.IsNullOrWhiteSpace(playerName) && score > 0)
        {
            ScoreService.AddScore(new ScoreEntry(playerName, score));
        }
        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Generates the answer choices for the current question and assigns them to the answerChoices list.
    /// </summary>
    /// <remarks>
    /// <para>This method handles two types of questions:</para>
    /// <para>- If the question type is "boolean", the choices will be "True" and "False".</para>
    /// <para>- If the question type is "multiple", the choices will include the correct answer and
    /// all incorrect answers. The answers are shuffled randomly to ensure fairness in the answer order.</para>
    /// </remarks>
    private void GenerateAnswerChoices()
    {
        if (currentQuestion.Type == "boolean")
        {
            answerChoices = new List<string> { "True", "False" };
        }
        else if (currentQuestion.Type == "multiple")
        {
            answerChoices = new List<string>(currentQuestion.IncorrectAnswers)
        {
            currentQuestion.CorrectAnswer
        };
            answerChoices = answerChoices.OrderBy(x => Guid.NewGuid()).ToList();
        }
    }

    /// <summary>
    /// Restarts the game.
    /// </summary>
    private async Task RestartGame() => await StartGame();

    /// <summary>
    /// Triggers a UI state change.
    /// </summary>
    public void TriggerStateHasChanged() => StateHasChanged();
}
