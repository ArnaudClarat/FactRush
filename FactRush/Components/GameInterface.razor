@inject HttpClient Http
@inject FactRush.Services.GameState GameState
@inject FactRush.Services.TopScoreService TopScoreService
@inject FactRush.Services.IQuestionService QuestionService

<div class="mb-3">
    <h2>@currentQuestion.Text</h2>
</div>
@if (answerChoices != null && answerChoices.Count >= 2)
{
    <div class="row justify-content-center mb-3 g-2">
        <div class="col-md-5">
            <button class="btn btn-outline-primary w-100" @onclick='() => SubmitAnswer(answerChoices[0])'>
                @answerChoices[0]
            </button>
        </div>
        <div class="col-md-5">
            <button class="btn btn-outline-primary w-100" @onclick='() => SubmitAnswer(answerChoices[1])'>
                @answerChoices[1]
            </button>
        </div>
        @if (answerChoices.Count == 4)
        {
            <div class="col-md-5">
                <button class="btn btn-outline-primary w-100" @onclick='() => SubmitAnswer(answerChoices[2])'>
                    @answerChoices[2]
                </button>
            </div>
            <div class="col-md-5">
                <button class="btn btn-outline-primary w-100" @onclick='() => SubmitAnswer(answerChoices[3])'>
                    @answerChoices[3]
                </button>
            </div>
        }
    </div>
}
<p style="color: @(currentQuestion.Difficulty == "easy" ? "green" : currentQuestion.Difficulty == "medium" ? "orange" : "red")">
    Temps restant : @timeRemaining s
</p>
<h2>Score : @GameState.Score</h2>

@code {
    private string token = "";
    public Question currentQuestion = new Question { Text = "Loading", CorrectAnswer = "" };
    private readonly static int timer = 50;
    private int timeRemaining = timer;
    private System.Threading.Timer? countdownTimer;
    private List<string> answerChoices = new();
    private List<Question> questions = new();

    /// <summary>
    /// Called when the component is initialized.
    /// Requests a unique token from the OpenTDB API.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        // Obtenir un token unique au début de la partie
        // Demander un token à l'API d'OpenTDB
        var response = await Http.GetFromJsonAsync<TokenResponse>("https://opentdb.com/api_token.php?command=request");
        if (response != null && response.ResponseCode == 0)
        {
            token = response.Token;
        }
        GameState.Score = 0;

        questions.AddRange(await QuestionService.LoadQuestions(10));
        if (questions.Count > 0)
        {
            currentQuestion = questions[0];
            answerChoices = Question.GenerateAnswerChoices(currentQuestion);
        }
        StartTimerForCurrentQuestion();
    }

    /// <summary>
    /// Starts a countdown timer for each question
    /// </summary>
    private void StartTimerForCurrentQuestion()
    {
        Console.WriteLine(currentQuestion);
        timeRemaining = timer;
        countdownTimer?.Dispose();
        countdownTimer = new System.Threading.Timer(async _ =>
        {
            if (--timeRemaining <= 0)
            {
                await InvokeAsync(EndGame);
                countdownTimer?.Dispose();
            }
            else
            {
                await InvokeAsync(StateHasChanged);
            }
        }, null, 1000, 1000);
    }

    /// <summary>
    /// Submits the player's answer and either loads the next question or ends the game.
    /// </summary>
    /// <param name="answer">The answer provided by the player.</param>
    private async Task SubmitAnswer(string answer)
    {
        countdownTimer?.Dispose();

        if (answer == currentQuestion.CorrectAnswer)
        {
            GameState.Score += currentQuestion.Difficulty switch
            {
                "easy" => 100,
                "medium" => 200,
                "hard" => 500,
                _ => 0
            };

            questions.RemoveAt(0);

            if (questions.Count == 0)
            {
                EndGame();
                return;
            }
            else
            {
                currentQuestion = questions[0];
                answerChoices = Question.GenerateAnswerChoices(currentQuestion);

                if (questions.Count < 5)
                {
                    questions.AddRange(await QuestionService.LoadQuestions(5));
                }
                StartTimerForCurrentQuestion();
            }
        }
        else
        {
            EndGame();
            return;
        }
    }

    /// <summary>
    /// Ends the game, adds the player's score to the top scores list if applicable.
    /// </summary>
    private void EndGame()
    {
        Console.WriteLine("Perdu!");
        GameState.GameOver = true;
        countdownTimer?.Dispose();
        if (GameState.Score > 0)
        {
            TopScoreService.AddScore(new ScoreEntry(GameState.PlayerName, GameState.Score));
        }
    }
}
